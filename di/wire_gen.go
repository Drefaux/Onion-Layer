// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"OnionPractice/app/infrastructure/database"
	"OnionPractice/app/usecase"
	"OnionPractice/db"
	"github.com/google/wire"
)

// Injectors from define.go:

// use case
func CreateTodoUseCase() (usecase.CreateTodoUseCase, error) {
	gormDB := db.GetDB()
	todoRepository := database.NewTodoRepository(gormDB)
	createTodoUseCase := usecase.NewCreateTodoUseCase(todoRepository)
	return createTodoUseCase, nil
}

func GetTodoUseCase() (usecase.GetTodoUseCase, error) {
	gormDB := db.GetDB()
	todoRepository := database.NewTodoRepository(gormDB)
	getTodoUseCase := usecase.NewGetTodoUseCase(todoRepository)
	return getTodoUseCase, nil
}

func GetAllCategoriesUseCase() (usecase.GetAllCategoriesUseCase, error) {
	gormDB := db.GetDB()
	categoryRepository := database.NewCategoryRepository(gormDB)
	getAllCategoriesUseCase := usecase.NewGetAllCategoriesUseCase(categoryRepository)
	return getAllCategoriesUseCase, nil
}

func CreateCategoryUseCase() (usecase.CreateCategoryUseCase, error) {
	gormDB := db.GetDB()
	categoryRepository := database.NewCategoryRepository(gormDB)
	createCategoryUseCase := usecase.NewCreateCategoryUseCase(categoryRepository)
	return createCategoryUseCase, nil
}

// define.go:

var providerSet = wire.NewSet(db.GetDB, database.NewTodoRepository, database.NewCategoryRepository)
